******************************* Segment: Default *******************************
********************************* Segment: ZP **********************************
[ZP]
0002: 00        - framecount:.byte 0 
0003: 00        - maxframes:.byte 0
0004: 00        - offset: .byte 0 
0005: 00 00     - mathtest1:.word 0
0007: 00 00     - mathtest2:.word 0
0009: 00 00     - mathresult:.word 0
000b: 00 00 00  - math24result:.byte 0,0,0
000e: 00        - temp_var:.byte 0
000f: 00 00     - DestinationAddress:.word 0 
0011: 00        - apl_bitbuf:.byte 0 
0012: 00 00     - apl_offset:.word 0 
0014: 00 00     - apl_winptr,apl_length:.word 0 
0016: 00 00     - apl_srcptr:.word 0 
0018: 00 00     - apl_dstptr:.word 0 
001a: 00        - pressedBit:.byte 0 
001b: 00        - result8:.byte 0
001c: 00 00     - result16:.word 0
001e: 00 00     - magic16:.word 0
0020: 00 00     - mem_source:.word 0 
0022: 00 00     - mem_dest:.word 0 
0024: 00 00     - mem_size:.word 0 
******************************** Segment: CODE *********************************
[Basic]
0801: 0b 08     -         
0803: 0a 00     -         
0805: 9e        -         
0806: 32 30 36 32                                      -         
080a: 00        -         
080b: 00 00     - upstartEnd:

[Basic End]
080e: 78        - Start:  sei 
080f: 20 75 09  -         jsr TaskOS.Init 
0812: 20 ee 09  -         jsr SystemType
0815: 20 dc 0b  -         jsr Random.RNDSIDInit 
0818: a9 00     -         lda #$00
081a: 8d 20 00  -         sta mem_source
081d: a9 f8     -         lda #<size
081f: a0 03     -         ldy #>size 
0821: 8d 24 00  -         sta mem_size
0824: 8c 25 00  -         sty mem_size+1 
0827: a9 00     -         lda #<dest 
0829: a0 d8     -         ldy #>dest
082b: 8d 22 00  -         sta mem_dest
082e: 8c 23 00  -         sty mem_dest+1
0831: 20 ee 0b  -         jsr _memset_
0834: a9 00     -         lda #<source 
0836: a0 e0     -         ldy #>source 
0838: 8d 20 00  -         sta mem_source
083b: 8c 21 00  -         sty mem_source+1
083e: a9 f8     -         lda #<size
0840: a0 03     -         ldy #>size 
0842: 8d 24 00  -         sta mem_size
0845: 8c 25 00  -         sty mem_size+1 
0848: a9 00     -         lda #<dest 
084a: a0 04     -         ldy #>dest
084c: 8d 22 00  -         sta mem_dest
084f: 8c 23 00  -         sty mem_dest+1
0852: 20 0b 0c  -         jsr _memcpy_
0855: a9 56     -         lda #(value)&$ff
0857: 85 0d     -         sta output+2
0859: a9 34     -         lda #(value>>8)&$ff
085b: 85 0c     -         sta output+1
085d: a9 12     -         lda #(value>>16)&$ff
085f: 85 0b     -         sta output
0861: a9 34     -         lda #(value)&$ff
0863: 85 0a     -         sta output+1
0865: a9 12     -         lda #(value>>8)&$ff
0867: 85 09     -         sta output
0869: 18        -         clc
086a: a5 0b     -         lda input 
086c: 69 01     -         adc #(value)&$ff
086e: 85 0b     -         sta output
0870: a5 0c     -         lda input+1
0872: 69 00     -         adc #(value>>8)&$ff
0874: 85 0c     -         sta output+1
0876: a5 0d     -         lda input+2
0878: 69 00     -         adc #(value>>16)&$ff
087a: 85 0d     -         sta output+2
087c: 18        -         clc
087d: a5 05     -         lda input 
087f: 69 43     -         adc #(value)&$ff
0881: 85 09     -         sta output
0883: a5 06     -         lda input+1
0885: 69 12     -         adc #(value>>8)&$ff
0887: 85 0a     -         sta output+1
0889: 18        -         clc
088a: a5 05     -         lda input 
088c: 65 09     -         adc value
088e: 85 09     -         sta output
0890: a5 06     -         lda input+1
0892: 65 0a     -         adc value+1
0894: 85 0a     -         sta output+1
0896: a9 63     -         lda #$63 
0898: 20 a6 0b  -         jsr Random.RND8Seed 
089b: a9 00     -         lda #$00 
089d: 85 04     -         sta offset
089f: a9 04     -         lda #$4 
08a1: 85 03     -         sta maxframes
08a3: 85 02     -         sta framecount
08a5: ad 07 0a  -         lda SystemType.isNTSC 
08a8: f0 04     -         beq notNTSC 
08aa: a9 05     -         lda #$5
08ac: 85 03     -         sta maxframes
08ae: a2 05     - notNTSC:ldx #Timer
08b0: a9 4d     -         lda #<func
08b2: a0 09     -         ldy #>func
08b4: 20 96 09  -         jsr	TaskOS.RegisterFunction
08b7: a2 00     -         ldx #Timer
08b9: a9 51     -         lda #<func
08bb: a0 09     -         ldy #>func
08bd: 20 96 09  -         jsr	TaskOS.RegisterFunction
08c0: a2 f0     -         ldx #Timer
08c2: a9 51     -         lda #<func
08c4: a0 09     -         ldy #>func
08c6: 20 96 09  -         jsr	TaskOS.RegisterFunction
08c9: a9 2c     -         lda #<source
08cb: a0 0c     -         ldy #>source 
08cd: 8d 16 00  -         sta apl_srcptr
08d0: 8c 17 00  -         sty apl_srcptr+1 
08d3: a9 00     -         lda #<dest 
08d5: a0 40     -         ldy #>dest
08d7: 8d 18 00  -         sta apl_dstptr
08da: 8c 19 00  -         sty apl_dstptr+1
08dd: 20 64 0a  -         jsr APUltraDecompressRoutine
08e0: 20 60 0b  -         jsr Joystick.Reset
08e3: ad 12 d0  - vbl:    lda $d012 
08e6: c9 80     -         cmp #$80
08e8: d0 f9     -         bne vbl 
08ea: 20 6d 0b  -         jsr Joystick.Poll
08ed: a2 04     -         ldx #Joystick.FIRE 
08ef: 20 85 0b  -         jsr Joystick.Pressed
08f2: d0 03     -         bne notPressed
08f4: ee 20 d0  -         inc $d020
08f7: a2 00     - notPressed:ldx #Joystick.UP
08f9: 20 98 0b  -         jsr Joystick.Held
08fc: d0 03     -         bne notHeld
08fe: ee 21 d0  -         inc $d021
0901: c6 02     - notHeld:dec framecount
0903: a5 02     -         lda framecount
0905: 10 04     -         bpl stepOS 
0907: a5 03     -         lda maxframes
0909: 85 02     -         sta framecount
090b: a5 02     - stepOS: lda framecount
090d: c9 05     -         cmp #$5 
090f: f0 09     -         beq noTick
0911: ee 20 d0  -         inc $d020
0914: 20 c2 09  -         jsr TaskOS.Step
0917: ce 20 d0  -         dec $d020 
091a: a5 02     - noTick: lda framecount
091c: a2 04     -         ldx #$04 
091e: a0 28     -         ldy #$28 
0920: 20 38 0a  -         jsr Debug.PrintHex
0923: ad 00 04  -         lda $400
0926: a2 04     -         ldx #$04 
0928: a0 50     -         ldy #$28+40 
092a: 20 09 0a  -         jsr Debug.PrintDEC8
092d: a6 04     -         ldx offset 
092f: 20 a8 0b  -         jsr Random.RND8 
0932: 9d c8 04  -         sta $0400+(5*40),x 
0935: 20 ea 0b  -         jsr Random.RNDSID 
0938: 9d e0 05  -         sta $0400+(12*40),x 
093b: e8        -         inx 
093c: 86 04     -         stx offset
093e: e0 00     -         cpx #$00 
0940: d0 08     -         bne noReseed 
0942: ad 1b 00  -         lda Random.result8 
0945: 69 0e     -         adc #14
0947: 8d 1b 00  -         sta Random.result8
094a: 4c e3 08  - noReseed:jmp vbl 
094d: ee 00 04  - Sample_Ticker:inc $0400 
0950: 60        -         rts
0951: ae e3 09  - Sample_Object,Init:ldx TaskOS.Step.CurrentTask
0954: a9 09     -         lda #'i'
0956: 9d 00 04  -         sta $0400,x
0959: 8a        -         txa
095a: 0a        -         asl 
095b: 0a        -         asl 
095c: 0a        -         asl 
095d: 0a        -         asl 
095e: 9d 10 12  -         sta TaskOS.ResetTime,x 
0961: 9d 00 12  -         sta TaskOS.Timer,x 
0964: a9 6c     -         lda #<func 
0966: a0 09     -         ldy #>func
0968: 20 8e 09  -         jsr TaskOS.SwitchFunction
096b: 60        -         rts
096c: a9 15     - Update: lda #'u'
096e: 9d 00 04  -         sta $0400,x
0971: fe 28 04  -         inc $0428,x
0974: 60        -         rts
0975: a2 0f     - Init:   ldx #MAX_TASKS-1
0977: 8e 40 12  -         stx TaskIndex
097a: a9 00     -         lda #$00
097c: 9d 00 12  -         sta Timer,x 
097f: 9d 10 12  -         sta ResetTime,x 
0982: a9 00     -         lda #$00
0984: 9d 30 12  -         sta UpdateMSB,x 
0987: 9d 20 12  -         sta UpdateLSB,x 
098a: ca        -         dex
098b: 10 ed     -         bpl !-
098d: 60        -         rts
098e: 9d 20 12  - SwitchFunction:sta UpdateLSB,x 
0991: 98        -         tya
0992: 9d 30 12  -         sta UpdateMSB,x 
0995: 60        -         rts
0996: 8e ae 09  - RegisterFunction:stx mod_time
0999: 8d a5 09  -         sta mod_func_lsb 
099c: ae 40 12  -         ldx TaskIndex
099f: bd 30 12  - taskSearch:lda UpdateMSB,x 
09a2: d0 15     -         bne notFree 
09a4: a9 ff     - mod_func_lsb-1:lda #$ff 
09a6: 9d 20 12  -         sta UpdateLSB,x 
09a9: 98        -         tya 
09aa: 9d 30 12  -         sta UpdateMSB,x
09ad: a9 00     - mod_time-1:lda #$00
09af: 9d 00 12  -         sta Timer,x 
09b2: 9d 10 12  -         sta ResetTime,x
09b5: 8e 40 12  -         stx TaskIndex 
09b8: 60        -         rts
09b9: ca        - notFree:dex 
09ba: 10 e3     -         bpl taskSearch		
09bc: a2 0f     -         ldx #MAX_TASKS-1 
09be: 8e 40 12  -         stx TaskIndex
09c1: 60        -         rts
09c2: a2 0f     - Step:   ldx #MAX_TASKS-1
09c4: bd 30 12  -         lda UpdateMSB,x 
09c7: f0 21     -         beq SkipTask 
09c9: 8d e1 09  -         sta TaskFunction+2
09cc: bd 20 12  -         lda UpdateLSB,x 
09cf: 8d e0 09  -         sta TaskFunction+1
09d2: bd 10 12  -         lda ResetTime,x 
09d5: f0 05     -         beq StepTask
09d7: de 00 12  -         dec Timer,x 
09da: d0 0e     -         bne SkipTask
09dc: 8e e3 09  - StepTask:stx CurrentTask
09df: 20 ad de  - TaskFunction:jsr $dead
09e2: a2 00     - CurrentTask-1:ldx #$00
09e4: bd 10 12  -         lda ResetTime,x 
09e7: 9d 00 12  -         sta Timer,x 
09ea: ca        - SkipTask:dex
09eb: 10 d7     -         bpl !-
09ed: 60        -         rts
09ee: a9 00     - SystemType:lda #$00 
09f0: 8d 07 0a  -         sta isNTSC
09f3: ad 12 d0  - w0:     lda $d012
09f6: cd 12 d0  - w1:     cmp $d012
09f9: f0 fb     -         beq w1
09fb: 30 f6     -         bmi w0
09fd: 29 03     -         and #$03
09ff: c9 03     -         cmp #$3 
0a01: f0 03     -         beq notNTSC
0a03: ee 07 0a  -         inc isNTSC
0a06: a9 00     - notNTSC,isNTSC-1:lda #$00
0a08: 60        -         rts
0a09: 84 0f     - Debug,PrintDEC8:sty DestinationAddress
0a0b: 86 10     -         stx DestinationAddress+1
0a0d: a0 2f     -         ldy #$2f
0a0f: a2 3a     -         ldx #$3a
0a11: 38        -         sec
0a12: c8        -         iny
0a13: e9 64     -         sbc #100
0a15: b0 fb     -         bcs !-
0a17: ca        -         dex
0a18: 69 0a     -         adc #10
0a1a: 30 fb     -         bmi !-
0a1c: 69 2f     -         adc #$2f
0a1e: 8c 2a 0a  -         sty hundreds
0a21: 8e 2f 0a  -         stx tens
0a24: 8d 34 0a  -         sta ones 
0a27: a0 00     -         ldy #$00
0a29: a9 00     - hundreds-1:lda #$00
0a2b: 91 0f     -         sta (DestinationAddress),y 
0a2d: c8        -         iny
0a2e: a9 00     - tens-1: lda #$00 
0a30: 91 0f     -         sta (DestinationAddress),y
0a32: c8        -         iny 
0a33: a9 00     - ones-1: lda #$00 
0a35: 91 0f     -         sta (DestinationAddress),y
0a37: 60        -         rts
0a38: 84 0f     - PrintHex:sty DestinationAddress
0a3a: 86 10     -         stx DestinationAddress+1
0a3c: a0 00     -         ldy #$00
0a3e: 48        -         pha
0a3f: 4a        -         lsr
0a40: 4a        -         lsr
0a41: 4a        -         lsr
0a42: 4a        -         lsr
0a43: aa        -         tax
0a44: bd 54 0a  -         lda tab,x
0a47: 91 0f     -         sta (DestinationAddress),y
0a49: c8        -         iny
0a4a: 68        -         pla
0a4b: 29 0f     -         and #$0f
0a4d: aa        -         tax
0a4e: bd 54 0a  -         lda tab,x
0a51: 91 0f     -         sta (DestinationAddress),y
0a53: 60        -         rts
0a54: 30 31 32 33 34 35 36 37 38 39 01 02 03 04 05 06  - tab:    .text "0123456789ABCDEF"
0a64: a0 00     - APUltraDecompressRoutine:ldy     #0                      // Initialize source index_
0a66: a9 80     -         lda     #$80                    // Initialize an empty
0a68: 85 11     -         sta     <apl_bitbuf             // bit-buffer_
0a6a: b1 16     - _literal:lda     (apl_srcptr),y
0a6c: e6 16     -         inc     <apl_srcptr + 0
0a6e: d0 02     -         bne     skip
0a70: e6 17     -         inc	<apl_srcptr + 1
0a72: a2 00     - skip,_write_byte:ldx     #0                      // LWM=0_
0a74: 91 18     -         sta     (apl_dstptr),y          // Write the byte directly to
0a76: e6 18     -         inc     <apl_dstptr + 0         // the output_
0a78: d0 02     -         bne     _next_tag
0a7a: e6 19     -         inc     <apl_dstptr + 1
0a7c: 06 11     - _next_tag:asl     <apl_bitbuf             // 0 bbbbbbbb
0a7e: d0 03     -         bne     _skip0
0a80: 20 54 0b  -         jsr     _load_bit
0a83: 90 e5     - _skip0: bcc     _literal
0a85: 06 11     - _skip1: asl     <apl_bitbuf             // 1 0 <offset> <length>
0a87: d0 03     -         bne     _skip2
0a89: 20 54 0b  -         jsr     _load_bit
0a8c: 90 56     - _skip2: bcc     _copy_large
0a8e: 06 11     -         asl     <apl_bitbuf             // 1 1 0 dddddddn
0a90: d0 03     -         bne     _skip3
0a92: 20 54 0b  -         jsr     _load_bit
0a95: 90 1e     - _skip3: bcc     _copy_normal
0a97: a9 10     - _copy_short:lda     #$10
0a99: 06 11     - _nibble_loop:asl     <apl_bitbuf
0a9b: d0 05     -         bne     _skip4
0a9d: 48        -         pha
0a9e: 20 54 0b  -         jsr     _load_bit
0aa1: 68        -         pla
0aa2: 2a        - _skip4: rol
0aa3: 90 f4     -         bcc     _nibble_loop
0aa5: f0 cb     -         beq     _write_byte             // Offset=0 means write zero_
0aa7: 49 ff     -         eor     #$FF                    // Read the byte directly from
0aa9: a8        -         tay                             // the destination window_
0aaa: c8        -         iny
0aab: c6 19     -         dec     <apl_dstptr + 1
0aad: b1 18     -         lda     (apl_dstptr),y
0aaf: e6 19     -         inc     <apl_dstptr + 1
0ab1: a0 00     -         ldy     #0
0ab3: f0 bd     -         beq     _write_byte
0ab5: b1 16     - _copy_normal:lda     (apl_srcptr),y
0ab7: e6 16     -         inc     <apl_srcptr + 0
0ab9: d0 02     -         bne     skip
0abb: e6 17     -         inc	<apl_srcptr + 1
0abd: 4a        - skip:   lsr
0abe: f0 23     -         beq     _finished               // Offset 0 == EOF_
0ac0: 85 12     -         sta     <apl_offset + 0         // Preserve offset_
0ac2: 84 13     -         sty     <apl_offset + 1
0ac4: 98        -         tya                             // Y == 0_
0ac5: aa        -         tax                             // Bits 8__15 of length_
0ac6: 69 02     -         adc     #2                      // Bits 0___7 of length_
0ac8: d0 59     -         bne     _do_match               // NZ from previous ADC_
0aca: a9 01     - _get_gamma:lda     #1                      // Get a gamma-coded value_
0acc: 06 11     - _gamma_loop:asl     <apl_bitbuf
0ace: d0 05     -         bne     _skip5
0ad0: 48        -         pha
0ad1: 20 54 0b  -         jsr     _load_bit
0ad4: 68        -         pla
0ad5: 2a        - _skip5: rol
0ad6: 26 15     -         rol     <apl_length + 1
0ad8: 06 11     -         asl     <apl_bitbuf
0ada: d0 05     -         bne     _skip6
0adc: 48        -         pha
0add: 20 54 0b  -         jsr     _load_bit
0ae0: 68        -         pla
0ae1: b0 e9     - _skip6: bcs     _gamma_loop
0ae3: 60        - _finished:rts                             // All decompressed!
0ae4: 20 ca 0a  - _copy_large:jsr     _get_gamma              // Bits 8__15 of offset (min 2)_
0ae7: 84 15     -         sty     <apl_length + 1         // Clear hi-byte of length_
0ae9: e0 01     -         cpx     #1                      // CC if LWM==0, CS if LWM==1_
0aeb: e9 02     -         sbc     #2                      // -3 if LWM==0, -2 if LWM==1_
0aed: b0 07     -         bcs     _normal_pair            // CC if LWM==0 && offset==2_
0aef: 20 ca 0a  -         jsr     _get_gamma              // Get length (A=lo-byte & CC)_
0af2: a6 15     -         ldx     <apl_length + 1
0af4: 90 2d     -         bcc     _do_match               // Use previous Offset_
0af6: 85 13     - _normal_pair:sta     <apl_offset + 1         // Save bits 8__15 of offset_
0af8: b1 16     -         lda     (apl_srcptr),y
0afa: e6 16     -         inc     <apl_srcptr + 0
0afc: d0 02     -         bne     skip
0afe: e6 17     -         inc	<apl_srcptr + 1
0b00: 85 12     - skip:   sta     <apl_offset + 0         // Save bits 0___7 of offset_
0b02: 20 ca 0a  -         jsr     _get_gamma              // Get length (A=lo-byte & CC)_
0b05: a6 15     -         ldx     <apl_length + 1
0b07: a4 13     -         ldy     <apl_offset + 1         // If offset <    256_
0b09: f0 0a     -         beq     _lt256
0b0b: c0 7d     -         cpy     #$7D                    // If offset >= 32000, length += 2_
0b0d: b0 0b     -         bcs     _match_plus2
0b0f: c0 05     -         cpy     #$05                    // If offset >=  1280, length += 1_
0b11: b0 0b     -         bcs     _match_plus1
0b13: 90 0e     -         bcc     _do_match
0b15: a4 12     - _lt256: ldy     <apl_offset + 0         // If offset <    128, length += 2_
0b17: 30 0a     -         bmi     _do_match
0b19: 38        -         sec                             // aPLib gamma returns with CC_
0b1a: 69 01     - _match_plus2:adc     #1                      // CS, so ADC #2_
0b1c: b0 04     -         bcs     _match_plus256
0b1e: 69 00     - _match_plus1:adc     #0                      // CS, so ADC #1, or CC if fall
0b20: 90 01     -         bcc     _do_match               // through from _match_plus2_
0b22: e8        - _match_plus256:inx
0b23: 49 ff     - _do_match:eor     #$FF                    // Negate the lo-byte of length
0b25: a8        -         tay                             // and check for zero_
0b26: c8        -         iny
0b27: f0 0c     -         beq     _calc_addr
0b29: 49 ff     -         eor     #$FF
0b2b: e8        -         inx                             // Increment # of pages to copy_
0b2c: 18        -         clc                             // Calc destination for partial
0b2d: 65 18     -         adc     <apl_dstptr + 0         // page_
0b2f: 85 18     -         sta     <apl_dstptr + 0
0b31: b0 02     -         bcs     _calc_addr
0b33: c6 19     -         dec     <apl_dstptr + 1
0b35: 38        - _calc_addr:sec                             // Calc address of match_
0b36: a5 18     -         lda     <apl_dstptr + 0
0b38: e5 12     -         sbc     <apl_offset + 0
0b3a: 85 14     -         sta     <apl_winptr + 0
0b3c: a5 19     -         lda     <apl_dstptr + 1
0b3e: e5 13     -         sbc     <apl_offset + 1
0b40: 85 15     -         sta     <apl_winptr + 1
0b42: b1 14     - _copy_page:lda     (apl_winptr),y
0b44: 91 18     -         sta     (apl_dstptr),y
0b46: c8        -         iny
0b47: d0 f9     -         bne     _copy_page
0b49: e6 15     -         inc     <apl_winptr + 1
0b4b: e6 19     -         inc     <apl_dstptr + 1
0b4d: ca        -         dex                             // Any full pages left to copy?
0b4e: d0 f2     -         bne     _copy_page
0b50: e8        -         inx                             // LWM=1_
0b51: 4c 7c 0a  -         jmp     _next_tag
0b54: b1 16     - _load_bit:lda     (apl_srcptr),y
0b56: e6 16     -         inc     <apl_srcptr + 0
0b58: d0 02     -         bne     skip
0b5a: e6 17     -         inc	<apl_srcptr + 1
0b5c: 2a        - skip:   rol                             // from the compressed source_
0b5d: 85 11     -         sta     <apl_bitbuf
0b5f: 60        -         rts
0b60: a2 00     - Joystick,Reset:ldx #$00 
0b62: a9 ff     -         lda #$ff 
0b64: 9d 9e 0b  -         sta data,x 
0b67: e8        -         inx 
0b68: e0 08     -         cpx #8 
0b6a: d0 f8     -         bne !-
0b6c: 60        -         rts
0b6d: ad 00 dc  - Poll:   lda cia1_pra
0b70: 4a        -         lsr       
0b71: 6e 9e 0b  -         ror data+UP
0b74: 4a        -         lsr       	
0b75: 6e 9f 0b  -         ror data+DOWN
0b78: 4a        -         lsr
0b79: 6e a0 0b  -         ror data+LEFT
0b7c: 4a        -         lsr
0b7d: 6e a1 0b  -         ror data+RIGHT
0b80: 4a        -         lsr
0b81: 6e a2 0b  -         ror data+FIRE
0b84: 60        -         rts	
0b85: bd 9e 0b  - Pressed:lda data,x 
0b88: 85 1a     -         sta pressedBit
0b8a: a9 ff     -         lda #%11111111
0b8c: 24 1a     -         bit pressedBit
0b8e: 30 05     -         bmi noaction
0b90: 50 03     -         bvc noaction
0b92: a9 00     -         lda #$00
0b94: 60        -         rts
0b95: a9 01     - noaction:lda #$01
0b97: 60        -         rts
0b98: bd 9e 0b  - Held:   lda data,x 
0b9b: 29 01     -         and #1
0b9d: 60        -         rts
0b9e: 00 00 00 00 00 00 00 00                          - data:   .fill 8,0
0ba6: 85 1b     - Random,RND8Seed:sta result8
0ba8: a5 1b     - RND8:   lda result8
0baa: f0 05     -         beq doEor
0bac: 0a        -         asl
0bad: f0 04     -         beq noEor // if the input was $80, skip the EOR
0baf: 90 02     -         bcc noEor
0bb1: 49 c3     - doEor:  eor #MAGIC8
0bb3: 85 1b     - noEor:  sta result8
0bb5: 60        -         rts
0bb6: 85 1c     - RND16Seed:sta result16
0bb8: 86 1d     -         stx result16+1
0bba: a5 1c     - RND16:  lda result16
0bbc: f0 12     -         beq lowZero // $0000 and $8000 are special values to test for
0bbe: 06 1c     -         asl result16
0bc0: a5 1d     -         lda result16+1
0bc2: 2a        -         rol
0bc3: 90 14     -         bcc noEor
0bc5: 49 97     - doEor:  eor #<MAGIC16
0bc7: 85 1d     -         sta result16+1
0bc9: a5 1c     -         lda result16
0bcb: 49 10     -         eor #>MAGIC16
0bcd: 85 1c     -         sta result16
0bcf: 60        -         rts
0bd0: a5 1d     - lowZero:lda result16+1
0bd2: f0 f1     -         beq doEor // High byte is also zero, so apply the EOR
0bd4: 0a        -         asl
0bd5: f0 02     -         beq noEor // if $00 is left after the shift, then it was $80
0bd7: b0 ec     -         bcs doEor // else, do the EOR based on the carry bit as usual
0bd9: 85 1d     - noEor:  sta result16+1
0bdb: 60        -         rts
0bdc: a9 ff     - RNDSIDInit:lda #$ff  // maximum frequency value
0bde: 8d 0e d4  -         sta $d40e // voice 3 frequency low byte
0be1: 8d 0f d4  -         sta $d40f // voice 3 frequency high byte
0be4: a9 80     -         lda #$80  // noise waveform, gate bit off
0be6: 8d 12 d4  -         sta $d412 // voice 3 control register
0be9: 60        -         rts
0bea: ad 1b d4  - RNDSID: lda $d41b
0bed: 60        -         rts
0bee: a5 20     - _memset_:lda mem_source
0bf0: a0 00     -         ldy #0
0bf2: a6 25     -         ldx mem_size+1
0bf4: f0 0a     -         beq remaining_bytes
0bf6: 91 22     - ms1:    sta (mem_dest),y
0bf8: c8        -         iny
0bf9: d0 fb     -         bne ms1
0bfb: e6 23     -         inc mem_dest+1
0bfd: ca        -         dex
0bfe: d0 f6     -         bne ms1
0c00: a6 24     - remaining_bytes:ldx mem_size
0c02: f0 06     -         beq ms4
0c04: 91 22     - ms3:    sta (mem_dest),y
0c06: c8        -         iny
0c07: ca        -         dex
0c08: d0 fa     -         bne ms3
0c0a: 60        - ms4:    rts
0c0b: a0 00     - _memcpy_:ldy #0
0c0d: a6 25     -         ldx mem_size+1
0c0f: f0 0e     -         beq remaining_bytes
0c11: b1 20     - mc1:    lda (mem_source),y
0c13: 91 22     -         sta (mem_dest),y
0c15: c8        -         iny
0c16: d0 f9     -         bne mc1
0c18: e6 23     -         inc mem_dest+1
0c1a: e6 21     -         inc mem_source+1
0c1c: ca        -         dex
0c1d: d0 f2     -         bne mc1
0c1f: a6 24     - remaining_bytes:ldx mem_size
0c21: f0 08     -         beq mc4
0c23: b1 20     - mc3:    lda (mem_source),y
0c25: 91 22     -         sta (mem_dest),y
0c27: c8        -         iny
0c28: ca        -         dex
0c29: d0 f8     -         bne mc3
0c2b: 60        - mc4:    rts
******************************** Segment: DATA *********************************
[DATA]
0c2c: 00 ce 03 54 05 01 55 4a 03 44 06 9c 51 18 03 24 0f f0 e0 0b 70 a0 33 37 ac 06 fc 87 c7 30 04 0c  - sprite_data:.import binary "data/sprites.ap"
0c4c: 10 01 bc 85 d0 11 43 bc 0d cc a4 3b 8c 1f 50 a4 03 3f 68 fc 9f 40 7d 22 3d 40 fb a7 81 ac c1 03 
0c6c: 07 38 23 80 72 3e 7d 20 0f 54 43 fc ca c0 40 d4 a7 00 d4 89 83 09 90 80 0d 79 81 0c 17 08 7f 90 
0c8c: 03 10 0d f0 d0 43 9c 64 00 7f 2a c0 86 80 e7 0c 3c d5 48 c0 ac 54 a7 3a 35 19 6a 7a 46 40 e4 38 
0cac: 80 11 81 1b 07 3c 80 0f 70 a4 e7 18 30 8f 63 05 40 81 15 50 43 03 14 20 13 53 70 1d 38 05 77 1c 
0ccc: 0b f8 0e 2e b0 0c 6e 06 43 f3 47 80 38 10 ce 23 c3 53 84 18 7a 07 74 e0 04 66 44 74 54 7a 6e d4 
0cec: 9e 30 40 86 1d 50 5d c0 ff e0 0e a4 83 a1 40 3c 1e c7 0a a0 03 2a a8 81 2b e8 c0 af 5a e0 ad c8 
0d0c: 06 a5 50 a9 6a e0 ea 70 ab 26 fa af c0 f4 50 81 40 90 81 a4 90 06 d4 21 d8 90 58 a2 54 82 18 3a 
0d2c: 9c bf 40 0a 02 80 83 a1 03 f9 06 8a bc 0d 70 c6 15 c0 80 b8 06 a1 c0 1a 03 17 21 06 27 90 25 a2 
0d4c: 15 0c 31 36 52 ac c0 a8 15 c4 06 55 40 22 11 a4 06 45 06 15 c0 63 ca fa e0 bd 10 dc 67 06 0c cb 
0d6c: bd 00 a1 43 7b b2 70 84 80 ec 0d f4 07 59 00 0f 40 b6 7b 40 ef da 81 3a 63 c0 70 e7 0f d0 c0 f8 
0d8c: f0 d0 e8 7d b2 03 08 40 7e a7 00 d4 64 15 81 60 08 70 2b 3d 21 40 fe ab 83 6e 7a 81 70 64 87 30 
0dac: 14 00 fe 29 0f 80 b9 c3 2e 3c 80 de d5 7a b7 e5 6a 7a 46 40 f4 3c 80 44 81 e4 b9 80 f0 20 1a f0 
0dcc: e7 08 0c 8f c9 89 bd 9a b7 c9 86 14 c1 c5 90 12 74 31 dd 24 2f e0 c0 0e b8 ce 06 b9 1e 50 c1 65 
0dec: 80 b3 95 ff de 40 d3 61 c6 29 98 c1 25 8d 86 24 44 07 b6 13 19 25 98 80 70 2c 23 3e ec 59 82 72 
0e0c: 00 c7 26 a6 07 95 1e 0e 91 3a 07 0f 09 d8 1e aa 2a b8 00 45 2b 1f 40 87 04 10 03 14 58 87 57 25 
0e2c: 07 80 ad a0 66 22 20 20 70 01 38 52 05 10 92 06 77 e0 09 68 90 c9 80 dc c8 0f 02 6e d0 1c 20 08 
0e4c: 39 71 d1 7e 1f 8c 80 32 a2 6b 0a 0f 28 24 40 d6 8f 03 8e 03 b0 04 02 a0 66 19 af 80 6c b3 0e c7 
0e6c: 44 09 60 05 3b 07 e5 24 18 0e bd f8 12 70 0d 08 f3 03 d6 bb 00 e6 0e c4 38 fa 6c 1c 6d d8 08 f0 
0e8c: 38 10 1c 64 0d 0b 08 0f 10 01 42 46 ac 81 88 36 a8 d9 07 5a 68 03 58 21 86 d8 b2 07 04 19 0c 14 
0eac: 7e 40 25 06 11 43 03 91 8c 01 20 60 c8 07 e0 6c 19 40 a5 c0 51 01 9b 7b c0 74 55 81 28 53 a5 6c 
0ecc: 21 0c e8 a9 3a 34 31 51 1e 80 ed b4 11 d1 39 77 07 8c 38 6e 74 98 89 06 3f 00 ac 1c c6 10 80 e7 
0eec: 19 17 3d 39 c9 ba da 45 03 2b 40 da d2 99 6e 0f 23 7a 53 86 55 8c 55 92 4a 98 0e 40 fe 8e 0a aa 
0f0c: f4 a9 fa 29 00 2e 06 bd e6 12 a4 18 aa 58 a5 c0 79 c0 4c ff f0 86 40 2c 34 d2 0d 07 00 27 79 03 
0f2c: 39 af 81 0a b0 0a e5 6d 02 b3 81 87 27 20 b2 25 40 29 2a 68 9c 07 c0 57 99 04 7a 24 0a 79 a9 40 
0f4c: a9 70 15 ab 8a a4 de 40 df 00 d3 1c 00 20 e1 06 0c 40 28 e4 81 ac 0d f3 68 25 31 1e a4 00 fe cd 
0f6c: c5 0a dd b4 e9 f5 6d 89 15 98 2e 80 d1 e8 d1 f1 34 25 87 65 c9 65 12 65 1e 6f 40 51 62 55 68 55 
0f8c: 6e 74 53 7a 48 f9 c8 f0 6d 9c 32 80 f8 3a cb ee 29 84 03 e9 06 aa 6c 06 40 a8 ab 81 99 02 44 10 
0fac: ea 55 e0 fa c5 18 3f ee b1 c6 67 c0 b4 72 43 ea 08 3d ee 70 7f f9 bb 80 c2 a8 03 48 ac 83 20 68 
0fcc: 51 6b c9 99 56 2a 06 ea 02 66 04 11 31 55 ab a0 18 de 35 bb fc 86 db c0 90 43 f2 ab 96 3d db 93 
0fec: 80 ac 2e 85 0d 5c b2 3d 38 98 15 06 20 03 28 a8 0c 27 0f 74 ab 3a b1 a1 20 4e 40 88 87 5d 9a 80 
100c: 07 37 40 8b 35 70 c9 06 26 88 06 08 90 44 2a 19 19 1d 39 40 43 29 2b 08 40 dc 41 02 cf 84 7a 44 
102c: 05 28 c8 56 9a 12 6a 14 46 3a 1c 26 ac 3d a0 b0 90 41 40 ab 2c 8e 94 80 5d 2d a3 49 95 56 55 74 
104c: c6 88 76 3f fc 68 40 5d 90 08 2c 26 f4 90 80 4f 14 37 89 25 0e 2c 40 80 ec 81 30 1e d0 3d f4 95 
106c: cc b0 4c 40 b9 f7 0a 02 90 40 a3 43 f1 82 78 80 c7 09 60 0e 70 bd 71 03 6c 7a 52 00 e8 20 81 98 
108c: 03 68 50 ee 3a 01 d9 75 6e 06 55 c9 95 c0 8c 46 0c ad c0 e2 6a a9 4b 2e 5e 07 55 77 3a 17 1f f4 
10ac: df 6b 5d c0 fd 1f 01 a2 85 b7 40 dd d9 68 c0 0a aa ce 0a 2a 0e a6 c7 01 8a 37 02 2e 2c 06 06 0a 
10cc: 85 10 1a c8 28 9c 6a e7 1d 40 98 03 0c 81 c0 e0 aa 70 80 73 ae 82 f0 49 d0 0d 03 88 a0 d9 2a 01 
10ec: 81 28 d7 cc 0e a8 68 1a bf 22 18 40 0a 06 e6 08 83 c4 32 1a 02 6a 8a 0d d6 c5 a9 9e 07 2a 7a 45 
110c: 68 e5 9b 77 4f 60 0b 99 81 ee bf 4b 30 90 3b 7f e4 01 03 bf f0 03 ff e0 07 9f 6c 06 f8 88 0c fe 
112c: 80 fc 78 e7 c8 38 04 8b 97 47 06 30 f0 0f 79 e0 31 1f df 0c ef f8 c0 fe 70 e0 78 be 9b e0 3a ce 
114c: b0 26 00 ba a0 d6 a6 ac 96 9a a8 e4 aa e7 ca b1 03 ea cd ac 16 e0 00 a0 3a ab b0 0a af 80 0e 19 
116c: ae c0 02 f8 03 68 d6 23 ec 9a 82 39 05 2e 02 3f 03 db c9 51 79 40 a3 74 03 dc 53 81 80 90 49 b9 
118c: aa c5 80 85 03 e8 e4 68 40 e8 86 d4 21 aa a0 7a 34 c0 85 e5 5a 3f c0 ab 6b 23 a5 51 2a 4b 80 95 
11ac: 40 e5 39 00 0f e5 c9 a0 3f 80 23 80 ab 80 fe ad 00 65 2a 2a 80 91 40 fd 1f 77 43 40 bd 27 9b f4 
11cc: 5d c0 23 d3 20 b7 80 ed 1a d1 c0 f5 50 83 03 ae 57 80 93 7b 40 dc a2 d1 7b 80 e9 c5 80 1b 9b 81 
11ec: 9c 3f d1 03 f3 81 00 00                                                                         
**************************** Segment: TASKOS_VTABLE ****************************
